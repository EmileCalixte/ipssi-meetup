<?php


namespace app\controllers;

use app\models\databaseModels\Meetup;
use app\models\databaseModels\Vote;
use app\models\forms\CreateMeetupForm;
use app\models\User;
use Symfony\Component\CssSelector\Exception\InternalErrorException;
use Yii;
use yii\data\ActiveDataProvider;
use yii\web\BadRequestHttpException;
use yii\web\NotFoundHttpException;

class AdminController extends _MainController
{
    public function beforeAction($action)
    {
        /** @var User $user */
        $user = Yii::$app->user->identity;
        if (is_null($user) || !$user->is_admin) {
            throw new NotFoundHttpException('Page not found.');
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionMeetups($word = null)
    {
        if (!is_null($word)) {
            if ($word === 'create') {
                return $this->actionMeetupCreate();
            }
            $meetup = Meetup::findOne(['id' => $word]);
            if (!is_null($meetup)) {
                return $this->actionMeetup($meetup);
            }
            throw new NotFoundHttpException('Page not found.');
        }

        $query = Meetup::find()
            ->select("
                    meetup.id as id,
                    meetup.title as title,
                    avg(vote.value) as rating,
                    count(vote.value) as rates")
            ->leftJoin('vote', 'meetup.id = vote.meetup_id')
            ->groupBy('meetup.id');

        $meetupsDataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 10,
                'defaultPageSize' => 10
            ],
            'sort' => [
                'attributes' => ['title', 'rating', 'rates'],
                'defaultOrder' => ['rating' => SORT_DESC],
            ],
        ]);

        return $this->render('meetups', [
            'meetupsDataProvider' => $meetupsDataProvider,
        ]);
    }

    public function actionDeleteMeetup()
    {
        if (!Yii::$app->request->isPost) {
            throw new NotFoundHttpException('Page not found.');
        }

        if (!isset($_POST['meetupId'])) {
            throw new BadRequestHttpException();
        }

        $meetup = Meetup::findOne(['id' => $_POST['meetupId']]);

        if (is_null($meetup)) {
            throw new NotFoundHttpException('Meetup not found');
        }

        $votes = $meetup->votes;

        foreach ($votes as $vote) {
            $vote->delete();
        }

        $meetup->delete();

        return $this->redirect('/admin/meetups');
    }

    public function actionUsers($id = null)
    {
        if (!is_null($id)) {
            $user = User::findOne(['id' => $id]);
            if (!is_null($user)) {
                return $this->actionUser($user);
            }
            throw new NotFoundHttpException('Page not found.');
        }

        $usersDataProvider = new ActiveDataProvider([
            'query' => User::find()
                ->select("
                    user.id,
                    firstname,
                    lastname,
                    concat(`firstname`, `lastname`) as name,
                    count(vote.value) as rates
                ")
                ->leftJoin('vote', 'user.id = vote.voter_id')
                ->groupBy('user.id'),
            'pagination' => [
                'pageSize' => 10,
                'defaultPageSize' => 10
            ],
            'sort' => [
                'attributes' => ['name', 'rates'],
                'defaultOrder' => ['name' => SORT_ASC],
            ]
        ]);

        return $this->render('users', [
            'usersDataProvider' => $usersDataProvider,
        ]);
    }

    public function actionDeleteUser()
    {
        if (!Yii::$app->request->isPost) {
            throw new NotFoundHttpException('Page not found.');
        }

        if (!isset($_POST['userId'])) {
            throw new BadRequestHttpException();
        }

        $user = User::findOne(['id' => $_POST['userId']]);

        if (is_null($user)) {
            throw new NotFoundHttpException('User not found');
        }

        $transaction = Yii::$app->db->beginTransaction();

        if (!$user->is_admin) {
            $votes = $user->votes;

            foreach ($votes as $vote) {
                try {
                    $vote->delete();
                } catch (\Exception $e) {
                    $transaction->rollBack();
                    throw new InternalErrorException();
                }
            }

            $createdMeetups = $user->meetups;

            foreach ($createdMeetups as $createdMeetup) {
                $createdMeetup->creator_id = null;
                if (!$createdMeetup->save()) {
                    $transaction->rollBack();
                    throw new InternalErrorException();
                }
            }

            try {
                $user->delete();
            } catch (\Exception $e) {
                $transaction->rollBack();
                throw new InternalErrorException();
            }

            $transaction->commit();
        } else {
            Yii::$app->session->setFlash('error', 'Please revoke admin rights before deleting this user.');
            return $this->redirect('/admin/users/' . $user->id);
        }

        return $this->redirect('/admin/users');
    }

    public function actionGrantAdmin()
    {
        if (!Yii::$app->request->isPost) {
            throw new NotFoundHttpException('Page not found.');
        }

        if (!isset($_POST['userId'])) {
            throw new BadRequestHttpException();
        }

        $user = User::findOne(['id' => $_POST['userId']]);

        if (is_null($user)) {
            throw new NotFoundHttpException('Meetup not found');
        }

        $user->is_admin = true;

        if (!$user->save()) {
            throw new InternalErrorException();
        }

        return $this->redirect('/admin/users/' . $user->id);
    }

    public function actionRevokeAdmin()
    {
        if (!Yii::$app->request->isPost) {
            throw new NotFoundHttpException('Page not found.');
        }

        if (!isset($_POST['userId'])) {
            throw new BadRequestHttpException();
        }

        $user = User::findOne(['id' => $_POST['userId']]);

        if (is_null($user)) {
            throw new NotFoundHttpException('Meetup not found');
        }

        $admins = User::find()
            ->where(['is_admin' => true])
            ->all();

        if (count($admins) > 1) {
            $user->is_admin = false;
            if (!$user->save()) {
                throw new InternalErrorException();
            }
        } else {
            Yii::$app->session->setFlash('error', 'You can\'t perform this action because there is currently only one admin.');
        }

        return $this->redirect('/admin/users/' . $user->id);
    }

    private function actionMeetupCreate()
    {
        $model = new CreateMeetupForm();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            /** @var User $user */
            $user = Yii::$app->user->identity;

            $meetup = new Meetup();
            $meetup->title = $model->title;
            $meetup->description = $model->description;
            $meetup->creator_id = $user->id;

            if (!$meetup->save()) {
                throw new InternalErrorException();
            }

            return $this->redirect('/admin/meetups/' . $meetup->id);
        }

        return $this->render('meetup-create', [
            'model' => $model,
        ]);
    }

    private function actionMeetup(Meetup $meetup)
    {
        $ratesDataProvider = new ActiveDataProvider([
            'query' => Vote::find()
                ->select("
                    voter_id,
                    value,
                    firstname,
                    lastname,
                    concat(`firstname`, `lastname`) as name")
                ->leftJoin('user', 'user.id = vote.voter_id')
                ->where(['meetup_id' => $meetup->id]),
            'pagination' => [
                'pageSize' => 10,
                'defaultPageSize' => 10
            ],
            'sort' => [
                'attributes' => ['name', 'value'],
                'defaultOrder' => ['name' => SORT_ASC],
            ]
        ]);

        return $this->render('meetup', [
            'meetup' => $meetup,
            'ratesDataProvider' => $ratesDataProvider
        ]);
    }

    private function actionUser(User $user)
    {
        $ratesDataProvider = new ActiveDataProvider([
            'query' => Vote::find()
                ->select("
                    meetup_id,
                    value,
                    meetup.title as title,")
                ->leftJoin('meetup', 'meetup.id = vote.meetup_id')
                ->where(['voter_id' => $user->id]),
            'pagination' => [
                'pageSize' => 10,
                'defaultPageSize' => 10
            ],
            'sort' => [
                'attributes' => ['title', 'value'],
                'defaultOrder' => ['title' => SORT_ASC],
            ]
        ]);

        return $this->render('user', [
            'user' => $user,
            'ratesDataProvider' => $ratesDataProvider
        ]);
    }
}
